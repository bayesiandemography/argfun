% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/file_args.R
\name{file_args}
\alias{file_args}
\title{Process command line arguments}
\usage{
file_args(..., .load.rds = TRUE)
}
\arguments{
\item{\dots}{Names and values for arguments.}

\item{.load.rds}{Whether to automatically load
arguments that the look like they are names
of \code{.rds} files. Defaults to \code{TRUE}.}
}
\value{
\code{file_args} returns a named list of objects
invisibly, but is normally called for its side effect,
which is to create objects in the current environment.
}
\description{
Create objects in the current environment
based on values passed at the command line,
or on values supplied via \dots.
}
\details{
The behaviour of \code{file_args} depends the
on the type of R session it is called from:
an interactive session, or a session
invoked from the command line, e.g
via \code{\link[utils]{Rscript}}. Typically,
\code{file_args} is used iteractively when
developing code and via the command line
when the code is mature.

In an interactive session, \code{file_args}
takes the names and values for the objects
to be created from \dots. In a session
invoked from the command
line, \code{file_args} takes the values
from the command line, and uses names
from the command line where possible, and
names from \dots otherwise.

\code{file_args} tries to coerce values
passed at the command line to the same classes as
the corresponding arguments in \dots, raising
an error if this cannot be done.

When 

\code{file_args} assumes named values passed
at the command line have the form
\itemize{
  \item \code{-<single-letter>=<value>}
     e.g. \code{-n=10} or \code{-f=params.rds}, or
  \item \code{--<name>=<value>}
     e.g. \code{--nchains=10} or
       \code{--filename=params.rds},
}
or some combination of the two. (Note that there are
no spaces around the \code{=} sign.) \code{file_args}
processes both the same way.
}
\examples{
\dontrun{
file_args(p_inputs = "data/inputs.csv",
          fitted_values = "out/fitted_values.rds",
          variant = "low",
          size = 12)
}
}
\seealso{
\code{file_args} uses function
\code{\link[base]{interactive}} to decide
whether a function is interactive. It uses
function \code{\link[base]{commandArgs}}
to access command line arguments.
}
