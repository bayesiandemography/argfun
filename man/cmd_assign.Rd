% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cmd_assign.R
\name{cmd_assign}
\alias{cmd_assign}
\title{Process command line arguments}
\usage{
cmd_assign(...)
}
\arguments{
\item{...}{Name-value pairs.}
}
\value{
\code{cmd_assign()} is normally called
for its side effect, which is to create objects
in the current environment. However, \code{cmd_assign()}
also invisibly returns a named list of objects.
}
\description{
Create objects in the current environment,
based on arguments passed at the command line.
}
\section{Types of session}{
\code{cmd_assign()} behaves different depending on how it is called:
\itemize{
\item If \code{cmd_assign()} is called in a script that is
being run from the command line, then it uses
values that were passed at the command line.
\item If \code{cmd_assign()} is called in an interactive
session, then it uses default values.
}

\code{cmd_assign()} is typically used interactively
when developing or testing code, and in command
line mode once the code is mature.
}

\section{Matching names and values}{
\code{cmd_assign()} starts by processing named arguments.
\code{cmd_assign()} treats an argument as named
if the argument has the form

\verb{-<single-letter>=<value>}

or

\verb{--<name>=<value>}

for instance

\code{-n=100}

or

\code{--n_iteration=100}

(Note that there are no spaces around the
equals signs.)

Once \code{cmd_assign()} has processed named
command line arguments, it matches unnamed
arguments to unused names in the call to
\code{cmd_assign()}.

Consider, for instance, the script \code{analysis.R}
containing the lines

\if{html}{\out{<div class="sourceCode R">}}\preformatted{cmd_assign(data = "person.csv",
           impute = TRUE,
           max_age = 85)
}\if{html}{\out{</div>}}

If \code{analysis.R} is launched from the
command line using

\if{html}{\out{<div class="sourceCode R">}}\preformatted{Rscript analysis.R --max_age=90 person.csv --impute=TRUE
}\if{html}{\out{</div>}}

then \code{cmd_assign()} will proceed as follows
\itemize{
\item look for a named command line argument \code{impute},
and, in R, assign the name \code{impute} to whatever
value was passed (\code{"TRUE"} in this case)
\item look for a named command line argument \code{max_age},
and, in R, assign the name \code{max_age} to whatever
value was passed (\code{"90"} in this case)
\item look for an unnamed command line argument,
and, in R, assign the name \code{data} to whatever
value was passed (\code{"person.csv"} in this case).
}

\code{cmd_assign()} only reverts to defaults when
it is in interactive mode. When it is
in command line mode, every
\code{cmd_assign()}
must be supplied with a value at the command line.
}

\section{Creating objects}{
The way that an object is created in the
current R environment depends on the
type of value passed at the command line
and/or the value supplied as a default.
\subsection{Value looks like a \code{.rds} file path}{

If the value looks like the file path
for an \code{.rds} object (ie an object created
by a function  such as \link[base:readRDS]{base::saveRDS}),
then \code{cmd_assign()} tries to load the file.
For instance, in an interactive session,

\code{cmd_assign(costs = "costs.rds")}

is equivalent to

\code{costs <- readRDS("costs.rds")}

To avoid automatically loading an \code{.rds}
file, give the argument
a name starting with a dot. For instance,
in an interactive session,

\code{cmd_assign(.costs = "costs.rds")}

is equivalent to

\code{.costs <- "costs.rds"}
}

\subsection{Default is logical, integer, or double}{

If the default value is a logical, integer,
or double, then \code{cmd_assign()} will try to
convert the value supplied at the command
line to the same type. For instance,
if the call to \code{cmd_assign} is

\code{cmd_assign(x_lgl = FALSE, x_int = 3L, x_dbl = 3.142)}

then passing the values \code{"TRUE"}, \code{"2"},
and \code{"2.718"} at the command line is equivalent
to

\if{html}{\out{<div class="sourceCode R">}}\preformatted{x_lgl <- TRUE
x_int <- 2L
x_dbl <- 2.718
}\if{html}{\out{</div>}}
}

\subsection{Everything else}{

Otherwise, arguments passed at the command line
are simply copied into the current environment,
as named strings.
}
}

\section{More information}{
The vignette \code{vignette("command")}
gives examples of the use of \code{cmd_assign()},
and discusses how \code{cmd_assign} can be used in the
workflow for a data analysis.
}

\examples{
\dontrun{
cmd_assign(p_inputs = "data/inputs.csv",
           fitted_values = "out/fitted_values.rds",
           variant = "low",
           size = 12.2)
## In an interactive session, this is equivalent to
p_inputs <- "data/inputs.csv"
fitted_values <- readRDS("out/fitted_values.rds")
variant <- "low"
size <- 12.2
}
}
\seealso{
Function \code{\link[utils:Rscript]{utils::Rscript()}} and
package \code{littler} can be used to run
scripts from the command line.

Internally, \code{cmd_assign()} uses
\code{\link[base:interactive]{base::interactive()}} to decide whether
the current session is interactive, and uses
\code{\link[base:commandArgs]{base::commandArgs()}} to access command line
arguments.
}
