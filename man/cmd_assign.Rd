% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cmd_assign.R
\name{cmd_assign}
\alias{cmd_assign}
\title{Process command line arguments}
\usage{
cmd_assign(...)
}
\arguments{
\item{...}{Name-value pairs.}
}
\value{
\code{cmd_assign()} is normally called
for its side effect, which is to create objects
in the current environment. However, \code{cmd_assign()}
also invisibly returns a named list of objects.
}
\description{
Create objects in the current environment,
based on arguments passed at the command line.
Allows scripts to be used like functions.
}
\section{Types of session}{
The behavior of \code{cmd_assign()} depends how it is called:
\itemize{
\item If \code{cmd_assign()} is called in a script that is
run from the command line,
then \code{cmd_assign()} processes
values that were passed at the command line.
\item If \code{cmd_assign()} is used interactively, then
it processes values values supplied to it
when it is called.
}

\code{cmd_assign()} is designed mainly for use with the
command line. However, using it interactively can be
helpful when developing or testing code.
}

\section{How arguments are processed}{
\subsection{Matching names and values}{

\code{cmd_assign()} fist processes named arguments
\code{cmd_assign()} treats an argument as named
if it has the form

\verb{-<single-letter>=<value>}

or

\verb{--<name>=<value>}

Examples are \code{-n=100} and \code{--n_iteration=100}.
Note that there are no spaces around the
equals sign.

If a named argument supplied at the command line
does not have a counterpart in the call to
\code{cmd_assign()}, then \code{cmd_assign()} raises an error.

Once \code{cmd_assign()} has processed all the named
command line arguments, it matches any unnamed
command to any unused names from the call to
\code{cmd_assign()}.

When \code{cmd_assign()} is processing command line
arguments, it does not fall back on defaults.
Every name specified in the call to \code{cmd_assign()}
must be supplied with a value at the command line.
}

\subsection{Creating objects}{

A command line argument is a character string.
The object that \code{cmd_assign()} creates in
the current environment is just a copy of
this string, except in two situations:
\enumerate{
\item The string is the file path for an \code{.rds} file,
and the file path does not start with \code{"p_"}, \code{"p."}
or \code{"p<capital letter>"}. In this case,
\code{cmd_assign()} loads the file.
\item The default value is a logical, integer or
double. In this case, then \code{cmd_assign()}
converts the string to the same type.
}
}
}

\section{More information}{
The vignette NAME OF VIGNETTE gives examples
of the use of \code{cmd_assign()}, and discusses how
\code{cmd_assign} can be used in a data analysis
workflow.
}

\examples{
\dontrun{
cmd_assign(p_inputs = "data/inputs.csv",
           fitted_values = "out/fitted_values.rds",
           variant = "low",
           size = 12)
## In an interactive session, this is equivalent to
p_inputs <- "data/inputs.csv"
fitted_valus <- readRDS("out/fitted_values.rds")
variant <- low
size <- 12
}
}
\seealso{
Function \code{\link[utils:Rscript]{utils::Rscript()}} and
package \code{littler} can be used to run
scripts from the command line.

Internally, \code{cmd_assign()} uses
\code{\link[base:interactive]{base::interactive()}} to decide whether
the current session is interactive, and uses
\code{\link[base:commandArgs]{base::commandArgs()}} to access command line
arguments.
}
