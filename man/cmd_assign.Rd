% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cmd_assign.R
\name{cmd_assign}
\alias{cmd_assign}
\title{Process command line arguments}
\usage{
cmd_assign(...)
}
\arguments{
\item{...}{Name-value pairs.}
}
\value{
\code{cmd_assign()} invisible returns
a named list of objects, but is normally called
for its side effect, which is to create objects
in the current environment.
}
\description{
Create objects in the current environment
based on arguments passed at the command line.
Makes running a script a little like calling
a function.
}
\section{Types of session}{
The behaviour of \code{cmd_assign()} depends on the
type of session.
\subsection{Sessions invoked from a command line}{

\code{cmd_assign()} is typically used in scripts that
are launched from the command line, eg via
\code{\link[utils:Rscript]{utils::Rscript()}}. \code{cmd_assign()} uses
command line arguments that are passed when
the script is launched to create objects in
the current environment.
}

\subsection{Interactive sessions}{

\code{cmd_assign()} can also be used interactively,
which is useful when developing or testing code.
When used interactively, \code{cmd_assign()}
relies on defaults specified via ... .
}
}

\section{How arguments are processed}{
\subsection{Matching names to arguments}{

The way that \code{cmd_assign} matches values supplied
at the command line to names specified in the call
to \code{cmd_assign} is loosely based of the way that R
matches values supplied in a function call
to names specified in the function definition.

\code{cmd_assign} begins by identifying values
passed at the command line that are named.
\code{cmd_assign()} treats a value as named
if it has the form

\verb{-<single-letter>=<value>}

or

\verb{--<name>=<value>}

(note that there are no spaces around the \code{=}.)
Examples are \code{-n=100} and \code{--n_iteration=100}.

If a named argument is supplied at the command line
but that name was not specified in the call to
\verb{cmd_assign(), then }cmd_assign()` raises an error.

Once it has matched all the named command line
arguments, \code{cmd_assign()} matches unnamed command
line arguments to the remaining names in
.... As with R function calls, unnamed arguments
are matched in the order that they appear.

Every argument that is specified in the
call to \code{cmd_assign()} must be supplied with
a value at the command line. If no value is
supplied, \code{cmd_assign()} does not fall back
on the default, but instead raises an error.
}

\subsection{Creating objects}{

A command line argument is just a character string.
There are two circumstances in which \code{cmd_assign()}
converts the string into something else:
\enumerate{
\item If the string is the file path for an \code{.rds} file,
and the file path does not start with \code{"p_"}, \code{"p."}
or \code{"p<capital letter>"}, then \code{cmd_assign()} loads
the file.
\item If the default argument is a logical, integer or
double, then \code{cmd_assign} will try to convert the
string to the same type.
}

Otherwise \code{cmd_assign()} leaves the string untouched.
}
}

\section{More information}{
For examples of the use of \code{cmd_assign()},
plus discussion of how \code{cmd_assign} can fit
into a data analysis workflow,
see NAME OF VIGNETTE.
}

\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
## Running
cmd_assign(p_inputs = "data/inputs.csv",
           fitted_values = "out/fitted_values.rds",
           variant = "low",
           size = 12)
## in an interactive session is equivalent to
p_inputs <- "data/inputs.csv"
fitted_valus <- readRDS("out/fitted_values.rds")
variant <- low
size <- 12
## If the script containing the lines above
## is run from the command line, then
## "data/inputs.csv", "out/fitted_values.rds",
## "low", and 12 are replaced by values
## passed at the command line.
\dontshow{\}) # examplesIf}
}
\seealso{
Internally, \code{cmd_assign()} uses
\code{\link[base:interactive]{base::interactive()}} to decide whether
the current session is interactive, and uses
\code{\link[base:commandArgs]{base::commandArgs()}} to access command line
arguments.
}
